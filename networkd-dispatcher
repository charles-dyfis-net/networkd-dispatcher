#!/usr/bin/env python
# networkd-dispatcher
#   Dispatcher service for systemd-networkd, borrowed heavily from
#   networkd-notify.
# Copyright(c) 2016 by wave++ "Yuri D'Elia" <wavexx@thregr.org>
# Distributed under GPLv3+ (see COPYING) WITHOUT ANY WARRANTY.
# Copyright(c) 2017 by craftyguy "Clayton Craft" <clayton@craftyguy.net>
# Distributed under GPLv3+ (see COPYING) WITHOUT ANY WARRANTY.



from __future__ import print_function, division, generators, unicode_literals

import argparse
import subprocess
import os
import stat

import gi
from gi.repository import GLib as glib

import dbus
import dbus.mainloop.glib


# Constants
NETWORKCTL = ['/usr/bin/networkctl', '/bin/networkctl']
IWCONFIG = ['/usr/bin/iwconfig', '/sbin/iwconfig']
APP_NAME  = 'networkd'

STATE_IGN = {'carrier', 'degraded'}
STATE_MAP = {'off': 'offline',
             'no-carrier': 'disconnected',
             'dormant': 'configuring',
             'routable': 'online'}

# Nifty globals
IFACE_MAP = {}
SCRIPT_DIR = './etc/networkd-dispatcher'

def resolve_path(path_list):
    for path in path_list:
        if os.path.exists(path):
            return path
    return None


def update_iface_map():
    out = subprocess.check_output([NETWORKCTL, 'list', '--no-pager', '--no-legend'])
    IFACE_MAP.clear()
    for line in out.split(b'\n')[:-1]:
        fields = line.decode('ascii').split()
        IFACE_MAP[int(fields[0])] = fields[1]


def get_iface_data(iface):
    out = subprocess.check_output([NETWORKCTL, 'status', '--no-pager', '--no-legend', '--', iface])
    data = {}
    oldk = None
    for line in out.split(b'\n')[1:-1]:
        line = line.decode('ascii')
        k = line[:16].strip() or oldk
        oldk = k
        v = line[18:].strip()
        if k not in data:
            data[k] = v
        elif type(data[k]) == list:
            data[k].append(v)
        else:
            data[k] = [data[k], v]
    return data


def unquote(buf, char='\\'):
    idx = 0
    while True:
        idx = buf.find(char, idx)
        if idx < 0: break
        buf = buf[:idx] + buf[idx+1:]
        idx += 1
    return buf


def get_wlan_essid(iface):
    out = subprocess.check_output([IWCONFIG, '--', iface])
    line = out.split(b'\n')[0].decode('ascii')
    essid = line[line.find('ESSID:')+7:-3]
    return unquote(essid)


def get_scripts_list(state):
    script_list = list()
    path = SCRIPT_DIR + "/" + state + ".d"
    for entry in os.scandir(path):
        if entry.is_file():
            # Make sure script can be executed
            if not stat.S_IXUSR & entry.stat().st_mode:
                print("Unable to execute script, check file mode: " + entry.path)
            # Make sure script is owned by root
            elif entry.stat().st_uid != 0 or entry.stat().st_gid != 0:
                print("Unable to execute script, check file perms: " + entry.path)
            else:
                script_list.append(entry.path)
    return sorted(script_list)


def property_changed(typ, data, _, path):
    if typ != 'org.freedesktop.network1.Link':
        return
    if not path.startswith('/org/freedesktop/network1/link/_'):
        return
    if 'OperationalState' not in data:
        return
    state = data['OperationalState'] 
    if state in STATE_IGN:
        return

    # http://thread.gmane.org/gmane.comp.sysutils.systemd.devel/36460
    idx = path[32:]
    idx = int(chr(int(idx[:2], 16)) + idx[2:])
    iface = IFACE_MAP[idx]

    if state == 'routable':
        data = get_iface_data(iface)

        # fetch ESSID
        if data['Type'] == 'wlan':
            data['ESSID'] = get_wlan_essid(iface)

        # filter out uninteresting addresses
        addrs = []
        if type(data['Address']) != list:
            addrs = [data['Address']]
        else:
            for addr in data['Address']:
                if addr.startswith('127.') or \
                   addr.startswith('fe80:'):
                    continue
                addrs.append(addr)
    script_list = get_scripts_list(state)
    if script_list is None:
        return

    # Set script env. variables
    script_env = {
        **os.environ,
        'IFACE': iface,
        'STATE': str(state),
    }
    if 'ESSID' in data:
        script_env['ESSID'] = data['ESSID']
    if 'Address' in data:
        # only expose the first address
        # TODO: create array to send, or ??
        script_env['ADDR'] = data['Address'][0]

    # run all valid scripts in the list
    #TODO: At some point, check return code and handle errors
    for script in script_list:
        ret = subprocess.Popen(script, env=script_env, shell=True).wait()


if __name__ == '__main__':
    ap = argparse.ArgumentParser(description='networkd dispatcher daemon')
    args = ap.parse_args()

    NETWORKCTL = resolve_path(NETWORKCTL)
    IWCONFIG = resolve_path(IWCONFIG)

    # interfaces never change at runtime, right??
    update_iface_map()

    # listen on for networkd events
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()
    bus.add_signal_receiver(property_changed,
                            bus_name='org.freedesktop.network1',
                            signal_name='PropertiesChanged',
                            path_keyword='path')

    # main loop
    mainloop = glib.MainLoop()
    mainloop.run()
